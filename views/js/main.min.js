/*
Welcome to the 60fps project! Your goal is to make Cam's Pizzeria website run
jank-free at 60 frames per second.

There are two major issues in this code that lead to sub-60fps performance. Can
you spot and fix both?


Built into the code, you'll find a few instances of the User Timing API
(window.performance), which will be console.log()ing frame rate data into the
browser console. To learn more about User Timing API, check out:
http://www.html5rocks.com/en/tutorials/webperformance/usertiming/

Creator:
Cameron Pittman, Udacity Course Developer
cameron *at* udacity *dot* com
*/

// As you may have realized, this website randomly generates pizzas.
// Here are arrays of all possible pizza ingredients.

var pizzaIngredients = {};
pizzaIngredients.meats = ["Pepperoni", "Sausage", "Fennel Sausage", "Spicy Sausage", "Chicken", "BBQ Chicken", "Chorizo", "Chicken Andouille", "Salami", "Tofu", "Bacon", "Canadian Bacon", "Proscuitto", "Italian Sausage", "Ground Beef", "Anchovies", "Turkey", "Ham", "Venison", "Lamb", "Duck", "Soylent Green", "Carne Asada", "Soppressata Picante", "Coppa", "Pancetta", "Bresola", "Lox", "Guanciale", "Chili", "Beef Jerky", "Pastrami", "Kielbasa", "Scallops", "Filet Mignon"], pizzaIngredients.nonMeats = ["White Onions", "Red Onions", "Sauteed Onions", "Green Peppers", "Red Peppers", "Banana Peppers", "Ghost Peppers", "Habanero Peppers", "Jalapeno Peppers", "Stuffed Peppers", "Spinach", "Tomatoes", "Pineapple", "Pear Slices", "Apple Slices", "Mushrooms", "Arugula", "Basil", "Fennel", "Rosemary", "Cilantro", "Avocado", "Guacamole", "Salsa", "Swiss Chard", "Kale", "Sun Dried Tomatoes", "Walnuts", "Artichoke", "Asparagus", "Caramelized Onions", "Mango", "Garlic", "Olives", "Cauliflower", "Polenta", "Fried Egg", "Zucchini", "Hummus"], pizzaIngredients.cheeses = ["American Cheese", "Swiss Cheese", "Goat Cheese", "Mozzarella Cheese", "Parmesean Cheese", "Velveeta Cheese", "Gouda Cheese", "Muenster Cheese", "Applewood Cheese", "Asiago Cheese", "Bleu Cheese", "Boursin Cheese", "Brie Cheese", "Cheddar Cheese", "Chevre Cheese", "Havarti Cheese", "Jack Cheese", "Pepper Jack Cheese", "Gruyere Cheese", "Limberger Cheese", "Manchego Cheese", "Marscapone Cheese", "Pecorino Cheese", "Provolone Cheese", "Queso Cheese", "Roquefort Cheese", "Romano Cheese", "Ricotta Cheese", "Smoked Gouda"], pizzaIngredients.sauces = ["Red Sauce", "Marinara", "BBQ Sauce", "No Sauce", "Hot Sauce"], pizzaIngredients.crusts = ["White Crust", "Whole Wheat Crust", "Flatbread Crust", "Stuffed Crust"],

// Name generator pulled from http://saturdaykid.com/usernames/generator.html
// Capitalizes first letter of each word
String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1)
};

// types of adjectives and nouns for pizza titles
var adjectives = ["dark", "color", "whimsical", "shiny", "noise", "apocalyptic", "insulting", "praise", "scientific"],
    nouns = ["animals", "everyday", "fantasy", "gross", "horror", "jewelry", "places", "scifi"];

// Pulls adjective out of array using random number sent from generator
function getAdj(a) {
    switch (a) {
        case "dark":
            var b = ["dark", "morbid", "scary", "spooky", "gothic", "deviant", "creepy", "sadistic", "black",
                "dangerous", "dejected", "haunted", "morose", "tragic", "shattered", "broken", "sad", "melancholy",
                "somber", "dark", "gloomy", "homicidal", "murderous", "shady", "misty", "dusky", "ghostly", "shadowy",
                "demented", "cursed", "insane", "possessed", "grotesque", "obsessed"
            ];
            return b;
        case "color":
            var c = ["blue", "green", "purple", "grey", "scarlet", "NeonGreen", "NeonBlue", "NeonPink", "HotPink",
                "pink", "black", "red", "maroon", "silver", "golden", "yellow", "orange", "mustard", "plum", "violet",
                "cerulean", "brown", "lavender", "violet", "magenta", "chestnut", "rosy", "copper", "crimson", "teal",
                "indigo", "navy", "azure", "periwinkle", "brassy", "verdigris", "veridian", "tan", "raspberry", "beige", "sandy", "ElectricBlue", "white", "champagne", "coral", "cyan"
            ];
            return c;
        case "whimsical":
            var d = ["whimsical", "silly", "drunken", "goofy", "funny", "weird", "strange", "odd", "playful", "clever", "boastful", "breakdancing", "hilarious", "conceited", "happy", "comical", "curious", "peculiar", "quaint", "quirky", "fancy", "wayward", "fickle", "yawning", "sleepy", "cockeyed", "dizzy", "dancing", "absurd", "laughing", "hairy", "smiling", "perplexed", "baffled", "cockamamie", "vulgar", "hoodwinked", "brainwashed"];
            return d;
        case "shiny":
            var e = ["sapphire", "opal", "silver", "gold", "platinum", "ruby", "emerald", "topaz", "diamond", "amethyst", "turquoise", "starlit", "moonlit", "bronze", "metal", "jade", "amber", "garnet", "obsidian", "onyx", "pearl", "copper", "sunlit", "brass", "brassy", "metallic"];
            return e;
        case "noisy":
            var f = ["untuned", "loud", "soft", "shrieking", "melodious", "musical", "operatic", "symphonic", "dancing", "lyrical", "harmonic", "orchestral", "noisy", "dissonant", "rhythmic", "hissing", "singing", "crooning", "shouting", "screaming", "wailing", "crying", "howling", "yelling", "hollering", "caterwauling", "bawling", "bellowing", "roaring", "squealing", "beeping", "knocking", "tapping", "rapping", "humming", "scatting", "whispered", "whispering", "rasping", "buzzing", "whirring", "whistling", "whistled"];
            return f;
        case "apocalyptic":
            var g = ["nuclear", "apocalyptic", "desolate", "atomic", "zombie", "collapsed", "grim", "fallen", "collapsed", "cannibalistic", "radioactive", "toxic", "poisonous", "venomous", "disastrous", "grimy", "dirty", "undead", "bloodshot", "rusty", "glowing", "decaying", "rotten", "deadly", "plagued", "decimated", "rotting", "putrid", "decayed", "deserted", "acidic"];
            return g;
        case "insulting":
            var h = ["stupid", "idiotic", "fat", "ugly", "hideous", "grotesque", "dull", "dumb", "lazy", "sluggish", "brainless", "slow", "gullible", "obtuse", "dense", "dim", "dazed", "ridiculous", "witless", "daft", "crazy", "vapid", "inane", "mundane", "hollow", "vacuous", "boring", "insipid", "tedious", "monotonous", "weird", "bizarre", "backward", "moronic", "ignorant", "scatterbrained", "forgetful", "careless", "lethargic", "insolent", "indolent", "loitering", "gross", "disgusting", "bland", "horrid", "unseemly", "revolting", "homely", "deformed", "disfigured", "offensive", "cowardly", "weak", "villainous", "fearful", "monstrous", "unattractive", "unpleasant", "nasty", "beastly", "snide", "horrible", "syncophantic", "unhelpful", "bootlicking"];
            return h;
        case "praise":
            var i = ["beautiful", "intelligent", "smart", "genius", "ingenious", "gorgeous", "pretty", "witty", "angelic", "handsome", "graceful", "talented", "exquisite", "enchanting", "fascinating", "interesting", "divine", "alluring", "ravishing", "wonderful", "magnificient", "marvelous", "dazzling", "cute", "charming", "attractive", "nifty", "delightful", "superior", "amiable", "gentle", "heroic", "courageous", "valiant", "brave", "noble", "daring", "fearless", "gallant", "adventurous", "cool", "enthusiastic", "fierce", "awesome", "radical", "tubular", "fearsome", "majestic", "grand", "stunning"];
            return i;
        case "scientific":
            var j = ["scientific", "technical", "digital", "programming", "calculating", "formulating", "cyberpunk", "mechanical", "technological", "innovative", "brainy", "chemical", "quantum", "astro", "space", "theoretical", "atomic", "electronic", "gaseous", "investigative", "solar", "extinct", "galactic"];
            return j;
        default:
            return ["scientific", "technical", "digital", "programming", "calculating", "formulating", "cyberpunk", "mechanical", "technological", "innovative", "brainy", "chemical", "quantum", "astro", "space", "theoretical", "atomic", "electronic", "gaseous", "investigative", "solar", "extinct", "galactic"]
    }
}

// Pulls noun out of array using random number sent from generator
function getNoun(a) {
    switch (a) {
        case "animals":
            var b = ["flamingo", "hedgehog", "owl", "elephant", "pussycat", "alligator", "dachsund", "poodle", "beagle", "crocodile", "kangaroo", "wallaby", "woodpecker", "eagle", "falcon", "canary", "parrot", "parakeet", "hamster", "gerbil", "squirrel", "rat", "dove", "toucan", "raccoon", "vulture", "peacock", "goldfish", "rook", "koala", "skunk", "goat", "rooster", "fox", "porcupine", "llama", "grasshopper", "gorilla", "monkey", "seahorse", "wombat", "wolf", "giraffe", "badger", "lion", "mouse", "beetle", "cricket", "nightingale", "hawk", "trout", "squid", "octopus", "sloth", "snail", "locust", "baboon", "lemur", "meerkat", "oyster", "frog", "toad", "jellyfish", "butterfly", "caterpillar", "tiger", "hyena", "zebra", "snail", "pig", "weasel", "donkey", "penguin", "crane", "buzzard", "vulture", "rhino", "hippopotamus", "dolphin", "sparrow", "beaver", "moose", "minnow", "otter", "bat", "mongoose", "swan", "firefly", "platypus"];
            return b;
        case "profession":
            var c = ["doctor", "lawyer", "ninja", "writer", "samurai", "surgeon", "clerk", "artist", "actor", "engineer", "mechanic", "comedian", "fireman", "nurse", "RockStar", "musician", "carpenter", "plumber", "cashier", "electrician", "waiter", "president", "governor", "senator", "scientist", "programmer", "singer", "dancer", "director", "mayor", "merchant", "detective", "investigator", "navigator", "pilot", "priest", "cowboy", "stagehand", "soldier", "ambassador", "pirate", "miner", "police"];
            return c;
        case "fantasy":
            var d = ["centaur", "wizard", "gnome", "orc", "troll", "sword", "fairy", "pegasus", "halfling", "elf", "changeling", "ghost", "knight", "squire", "magician", "witch", "warlock", "unicorn", "dragon", "wyvern", "princess", "prince", "king", "queen", "jester", "tower", "castle", "kraken", "seamonster", "mermaid", "psychic", "seer", "oracle"];
            return d;
        case "music":
            var e = ["violin", "flute", "bagpipe", "guitar", "symphony", "orchestra", "piano", "trombone", "tuba", "opera", "drums", "harpsichord", "harp", "harmonica", "accordion", "tenor", "soprano", "baritone", "cello", "viola", "piccolo", "ukelele", "woodwind", "saxophone", "bugle", "trumpet", "sousaphone", "cornet", "stradivarius", "marimbas", "bells", "timpani", "bongos", "clarinet", "recorder", "oboe", "conductor", "singer"];
            return e;
        case "horror":
            var f = ["murderer", "chainsaw", "knife", "sword", "murder", "devil", "killer", "psycho", "ghost", "monster", "godzilla", "werewolf", "vampire", "demon", "graveyard", "zombie", "mummy", "curse", "death", "grave", "tomb", "beast", "nightmare", "frankenstein", "specter", "poltergeist", "wraith", "corpse", "scream", "massacre", "cannibal", "skull", "bones", "undertaker", "zombie", "creature", "mask", "psychopath", "fiend", "satanist", "moon", "fullMoon"];
            return f;
        case "gross":
            var g = ["slime", "bug", "roach", "fluid", "pus", "booger", "spit", "boil", "blister", "orifice", "secretion", "mucus", "phlegm", "centipede", "beetle", "fart", "snot", "crevice", "flatulence", "juice", "mold", "mildew", "germs", "discharge", "toilet", "udder", "odor", "substance", "fluid", "moisture", "garbage", "trash", "bug"];
            return g;
        case "everyday":
            var h = ["mirror", "knife", "fork", "spork", "spoon", "tupperware", "minivan", "suburb", "lamp", "desk", "stereo", "television", "TV", "book", "car", "truck", "soda", "door", "video", "game", "computer", "calender", "tree", "plant", "flower", "chimney", "attic", "kitchen", "garden", "school", "wallet", "bottle"];
            return h;
        case "jewelry":
            var i = ["earrings", "ring", "necklace", "pendant", "choker", "brooch", "bracelet", "cameo", "charm", "bauble", "trinket", "jewelry", "anklet", "bangle", "locket", "finery", "crown", "tiara", "blingBling", "chain", "rosary", "jewel", "gemstone", "beads", "armband", "pin", "costume", "ornament", "treasure"];
            return i;
        case "places":
            var j = ["swamp", "graveyard", "cemetery", "park", "building", "house", "river", "ocean", "sea", "field", "forest", "woods", "neighborhood", "city", "town", "suburb", "country", "meadow", "cliffs", "lake", "stream", "creek", "school", "college", "university", "library", "bakery", "shop", "store", "theater", "garden", "canyon", "highway", "restaurant", "cafe", "diner", "street", "road", "freeway", "alley"];
            return j;
        case "scifi":
            var k = ["robot", "alien", "raygun", "spaceship", "UFO", "rocket", "phaser", "astronaut", "spaceman", "planet", "star", "galaxy", "computer", "future", "timeMachine", "wormHole", "timeTraveler", "scientist", "invention", "martian", "pluto", "jupiter", "saturn", "mars", "quasar", "blackHole", "warpDrive", "laser", "orbit", "gears", "molecule", "electron", "neutrino", "proton", "experiment", "photon", "apparatus", "universe", "gravity", "darkMatter", "constellation", "circuit", "asteroid"];
            return k;
        default:
            return ["robot", "alien", "raygun", "spaceship", "UFO", "rocket", "phaser", "astronaut", "spaceman", "planet", "star", "galaxy", "computer", "future", "timeMachine", "wormHole", "timeTraveler", "scientist", "invention", "martian", "pluto", "jupiter", "saturn", "mars", "quasar", "blackHole", "warpDrive", "laser", "orbit", "gears", "molecule", "electron", "neutrino", "proton", "experiment", "photon", "apparatus", "universe", "gravity", "darkMatter", "constellation", "circuit", "asteroid"]
    }
}

// Generates random numbers for getAdj and getNoun functions and returns a new pizza name
function generator(adj, noun) {
    var adjectives = getAdj(adj),
        nouns = getNoun(noun),
        randomAdjective = parseInt(Math.random() * adjectives.length),
        randomNoun = parseInt(Math.random() * noun.length);
    return "The " + adjectives[randomAdjective].capitalize() + " " + nouns[randomNoun].capitalize()
}

// Chooses random adjective and random noun
function randomName() {
    var randomNumberAdj = parseInt(Math.random() * adjectives.length),
        randomNumberNoun = parseInt(Math.random() * nouns.length);
    return generator(adjectives[randomNumberAdj], nouns[randomNumberNoun])
}

/**
 * This function is called when resizePizzas is called and the page can be updated through requestAnimationFrame.
 * The slider label is updated and the size of the pizza images are updated.
 */
function updatePizzaSize() {

    // Changes the value for the size of the pizza above the slider
    function changeSliderLabel() {
        switch (latestPizzaSize) {
            case "1":
                document.querySelector("#pizzaSize").innerHTML = "Small";
                break;
            case "2":
                document.querySelector("#pizzaSize").innerHTML = "Medium";
                break;
            case "3":
                document.querySelector("#pizzaSize").innerHTML = "Large";
                break;
            default:
                console.log("bug in changeSliderLabel of UpdatePizzaSize function a")
        }
    }
    // Changes the slider value to a percent width
    function widthSwitcher() {
        switch (latestPizzaSize) {
            case "1":
                return changeSliderLabel("Small"), "25%";
            case "2":
                return changeSliderLabel("Medium"), "33.33%";
            case "3":
                return changeSliderLabel("Large"), "50%";
            default:
                console.log("bug in sizeSwitcher");
        }
    }
    // Iterates through pizza elements on the page and changes their widths
    function changePizzaSizes() {
        for (var elements = document.querySelectorAll(".randomPizzaContainer"),
            numberofElements = elements.length, newWidth = widthSwitcher(), i = 0; numberofElements > i; i++) elements[i].style.width = newWidth;
    }
    // User Timing API is awesome
    window.performance.mark("mark_start_resize"), a(), c(), window.performance.mark("mark_end_resize"),
    window.performance.measure("measure_pizza_resize", "mark_start_resize", "mark_end_resize");
    var d = window.performance.getEntriesByName("measure_pizza_resize");
    console.log("Time to resize pizzas: " + d[0].duration + "ms"), currentlyAnimating = !1
}
// Logs the average amount of time per 10 frames needed to move the sliding background pizzas on scroll.
function logAverageFrame(times) {   // times is the array of User Timing measurements from updatePositions()
    for (var numberOfEntries = times.length, sum = 0, i = numberOfEntries - 1; i > numberOfEntries - 11; i--) sum += times[i].duration;
    console.log("Average time to generate last 10 frames: " + sum / 10 + "ms")
}
// The following code for sliding background pizzas was pulled from Ilya's demo found at:
// https://www.igvita.com/slides/2012/devtools-tips-and-tricks/jank-demo.html

// Moves the sliding background pizzas based on scroll position
function updatePositions() {
    frame++, window.performance.mark("mark_start_frame");
    var items = document.querySelectorAll(".mover"),
        value = document.body.scrollTop / 1250,
        tempItems = [];

// Caculate the new positions
    for (i = 0; i < items.length; i++) {
        var phase = Math.sin(value + (i % 5));
        tempItems[i] = items[i].basicLeft + 100 * phase + "px";
    }

// apply the new positions
    for (i = 0; i < items.length; i++) {
        items[i].style.left = tempItems[i];
    }

// User Timing API
    if (window.performance.mark("mark_end_frame"), window.performance.measure("measure_frame_duration", "mark_start_frame", "mark_end_frame"), frame % 10 === 0) {
        var f = window.performance.getEntriesByName("measure_frame_duration");
        logAverageFrame(f);
    }
    currentlyAnimating = !1
}
// Updates the pizzas in the background if a boolean test retuns true
function requestAnimation(PizzaBackgroundUpdate) {
    currentlyAnimating || (window.requestAnimationFrame(PizzaBackgroundUpdate ? updatePositions : updatePizzaSize), currentlyAnimating = !0)
}
// Updates lastesKnownScrollTop value.  Function called when the page scrolls
function onScroll() {
    latestKnownScrollTop = document.documentElement.scrollTop, requestAnimation(!0)
}

// These functions return a string of a random ingredient from each respective category of ingredients
 var selectRandomMeat = function() {
        return pizzaIngredients.meats[Math.floor(Math.random() * pizzaIngredients.meats.length)]
    },
    selectRandomNonMeat = function() {
        return pizzaIngredients.nonMeats[Math.floor(Math.random() * pizzaIngredients.nonMeats.length)]
    },
    selectRandomCheese = function() {
        return pizzaIngredients.cheeses[Math.floor(Math.random() * pizzaIngredients.cheeses.length)]
    },
    selectRandomSauce = function() {
        return pizzaIngredients.sauces[Math.floor(Math.random() * pizzaIngredients.sauces.length)]
    },
    selectRandomCrust = function() {
        return pizzaIngredients.crusts[Math.floor(Math.random() * pizzaIngredients.crusts.length)]
    },
    ingredientItemizer = function(a) {
        return "<li>" + a + "</li>"
    },

    // Returns a string with random pizza ingredients nested inside <li> tags
    makeRandomPizza = function() {
        var a, b = "",
            numberofMeats = Math.floor(4 * Math.random()),
            numberofNonMeats = Math.floor(3 * Math.random()),
            numberofCheeses = Math.floor(2 * Math.random());
        for (a = 0; numberofMeats > a; a++) b += ingredientItemizer(selectRandomMeat());
        for (a = 0; numberofNonMeats > a; a++) b += ingredientItemizer(selectRandomNonMeat());
        for (a = 0; numberofCheeses > a; a++) b += ingredientItemizer(selectRandomCheese());
        return b += ingredientItemizer(selectRandomSauce()), b += ingredientItemizer(selectRandomCrust())
    },

    // returns a DOM element for each pizza
    pizzaElementGenerator = function(a) {
        var pizzaContainer,                 // contains pizza title, image and list of ingredients
        pizzaImageContainer,                // contains the pizza image
        pizzaImage,                         // the pizza image itself
        pizzaDescriptionContainer,          // contains the pizza title and list of ingredients
        pizzaName,                          // the pizza name itself
        ul;                                 // the list of ingredients
        return pizzaContainer = document.createElement("div"),
        pizzaImageContainer = document.createElement("div"),
        pizzaImage = document.createElement("img"), pizzaDescriptionContainer = document.createElement("div"),
        pizzaContainer.classList.add("randomPizzaContainer"),

        pizzaContainer.style.width = "33.33%", pizzaContainer.style.height = "325px",
        pizzaContainer.id = "pizza" + a, pizzaImageContainer.classList.add("col-md-6"),      // gives each pizza element a unique id
        pizzaImage.src = "images/pizza.png", pizzaImage.classList.add("img-responsive"),
        pizzaImageContainer.appendChild(pizzaImage), pizzaContainer.appendChild(pizzaImageContainer), pizzaDescriptionContainer.classList.add("col-md-6"),
        pizzaName = document.createElement("h4"), pizzaName.innerHTML = randomName(),
        pizzaDescriptionContainer.appendChild(pizzaName), ul = document.createElement("ul"),
        ul.innerHTML = makeRandomPizza(), pizzaDescriptionContainer.appendChild(ul),
        pizzaContainer.appendChild(pizzaDescriptionContainer), pizzaContainer
    },

    // resizePizzas(size) is called when the slider in the "Our Pizzas" section of the website moves
    resizePizzas = function(size) {
        latestPizzaSize = size, requestAnimation(!1)
    };
window.performance.mark("mark_start_generating");   // collect timing data
// This for-loop actually creates and appends all of the pizzas when the page loads
for (var i = 2; 100 > i; i++) {
    var pizzasDiv = document.getElementById("randomPizzas");
    pizzasDiv.appendChild(pizzaElementGenerator(i))
}
// User Timing API again. These measurements tell you how long it took to generate the initial pizzas
window.performance.mark("mark_end_generating"), window.performance.measure("measure_pizza_generation", "mark_start_generating", "mark_end_generating");
var timeToGenerate = window.performance.getEntriesByName("measure_pizza_generation");
console.log("Time to generate pizzas on load: " + timeToGenerate[0].duration + "ms");
var frame = 0,  // Iterator for number of times the pizzas in the background have scrolled.
    latestKnownScrollTop = 0,
    latestPizzaSize = "2",
    currentlyAnimating = !1;

// Generates the sliding pizzas when the page loads
window.addEventListener("scroll", onScroll), document.addEventListener("DOMContentLoaded", function() {
    for (var cols = 8, b = 256, c = 0; 200 > c; c++) {
        var elem = document.createElement("img");
        elem.className = "mover", elem.src = "images/pizza.png", elem.style.height = "100px", elem.style.width = "73.333px",
        elem.basicLeft = c % cols * b, elem.style.top = Math.floor(c / cols) * b + "px", document.querySelector("#movingPizzas1").appendChild(elem)
    }
    updatePositions()
});

// Test code from piazza forum with permission to use that will helpful in testing the scroll performance of pizza.html in Project 4
var autoScroll = function() {

  var speed = 0;
  var scrollDir = 'down';
  var viewport = window.innerHeight;
  var bottom = document.body.scrollHeight;

  var getSpeed = function() {
    speed = prompt("Please Enter a Scroll Speed");
    scrollMove();
    stopButton();
  };

  var stopButton = function() {
    scrolling = true;
    var stop = document.createElement('button');
    stop.innerText = 'Stop Scroll';
    stop.style.position = 'fixed';
    stop.style.top = 0;
    stop.style.left = 0;
    stop.onclick = function() {
      if (scrolling) {
        clearTimeout(scrolldelay);
        scrolling = false;
        stop.innerText = 'Start Scroll';
      }
      else {
        speed = prompt("Please Enter a Scroll Speed");
        scrollMove();
        scrolling = true;
        stop.innerText = 'Stop Scroll';
      }
    };
    document.body.appendChild(stop);
  };


  var scrollMove = function() {
    if (scrollDir === 'down') {
      window.scrollBy(0,speed);
      scrolldelay = setTimeout(scrollMove,10);
    }
    if (scrollDir ==='up') {
      window.scrollBy(0,-speed);
      scrolldelay = setTimeout(scrollMove,10);
    }
    var sp = document.body.scrollTop;
    if (sp + viewport === bottom) {
      scrollDir = 'up';
    }
    if (sp === 0) {
      scrollDir = 'down';
    }
  };
  getSpeed();
};

autoScroll();
